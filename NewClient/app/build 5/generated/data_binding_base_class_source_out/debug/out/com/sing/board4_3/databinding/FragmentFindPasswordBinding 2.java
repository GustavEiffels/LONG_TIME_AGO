// Generated by view binder compiler. Do not edit!
package com.sing.board4_3.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.sing.board4_3.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentFindPasswordBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button findButton;

  @NonNull
  public final Toolbar findPasswordToolbar;

  @NonNull
  public final EditText inputEmail;

  @NonNull
  public final EditText inputId;

  private FragmentFindPasswordBinding(@NonNull LinearLayout rootView, @NonNull Button findButton,
      @NonNull Toolbar findPasswordToolbar, @NonNull EditText inputEmail,
      @NonNull EditText inputId) {
    this.rootView = rootView;
    this.findButton = findButton;
    this.findPasswordToolbar = findPasswordToolbar;
    this.inputEmail = inputEmail;
    this.inputId = inputId;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentFindPasswordBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentFindPasswordBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_find_password, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentFindPasswordBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.find_button;
      Button findButton = ViewBindings.findChildViewById(rootView, id);
      if (findButton == null) {
        break missingId;
      }

      id = R.id.find_password_toolbar;
      Toolbar findPasswordToolbar = ViewBindings.findChildViewById(rootView, id);
      if (findPasswordToolbar == null) {
        break missingId;
      }

      id = R.id.input_email;
      EditText inputEmail = ViewBindings.findChildViewById(rootView, id);
      if (inputEmail == null) {
        break missingId;
      }

      id = R.id.input_id;
      EditText inputId = ViewBindings.findChildViewById(rootView, id);
      if (inputId == null) {
        break missingId;
      }

      return new FragmentFindPasswordBinding((LinearLayout) rootView, findButton,
          findPasswordToolbar, inputEmail, inputId);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
